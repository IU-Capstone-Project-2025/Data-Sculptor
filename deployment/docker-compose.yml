version: '3.8'

services:
  jupyterhub:
    build:
      context: ..
      dockerfile: src/services/backend/jupyter_hub/Dockerfile
      args:
        - FEEDBACK_SERVICE_URL=http://${HOST_IP}:${FEEDBACK_PORT_EXTERNAL}
    container_name: "${COMPOSE_PROJECT_NAME}-jupyterhub"
    ports:
      - "${JUPYTER_PORT_EXTERNAL}:8000"
    volumes:
      - ../resources/config/jupyterhub/jupyter_ai_config.py:/etc/jupyter/jupyter_server_config.d/jupyter_ai_config.py:ro
      - ../resources/config/jupyterhub:/srv/jupyterhub:rw
      - ../src/services/backend/jupyter_hub_adapter_microservice/sendCode.py:/home/developer/sendCode.py:rw
      # - ../src/services/backend/lsp_server/lsp.py:/home/developer/lsp.py:rw
      - ../src/services/backend/jupyter_hub/jupyter-lsp-jupyter-server.json:/etc/jupyter/jupyter_server_config.d/jupyter-lsp-jupyter-server.json:rw
      - ../resources/data/jupyterhub:/home/developer:rw
    env_file:
      - ../resources/config/jupyterhub/.env
    environment:
      - ADVISER_API_URL=http://${HOST_IP}:{ADVISER_PORT_EXTERNAL}/api/v1/chat
      - LLM_VALIDATOR_URL=http://${HOST_IP}:${MEDIATOR_PORT_EXTERNAL}
      - URL_STATIC_ANALYZER=http://${HOST_IP}:${ANALYZER_PORT_EXTERNAL}
      - URL_LSP_SERVER=http://${HOST_IP}:${LSP_PORT_EXTERNAL}
    command: >
      bash -c "chown -R developer:developer /home/developer && exec jupyterhub"

  deep-syntatic-service:
    build:
      context: ../src/services/backend/syntactic_analyzis_microservice
      dockerfile: Dockerfile
    container_name: "${COMPOSE_PROJECT_NAME}-deep-static-analyzer-service"
    ports:
      - "${ANALYZER_PORT_EXTERNAL}:8085"
    environment:
      - SEMANTIC_FEEDBACK_LOCALISE_URL=http://${HOST_IP}:${FEEDBACK_PORT_EXTERNAL}/api/v1/localize_mlscent

  # real-time-analysis-service:
  #   build:
  #     context: ../src/services/backend/real_time_analysis_microservice
  #     dockerfile: Dockerfile
  #   container_name: "${COMPOSE_PROJECT_NAME}-real-time-static-analysis"
  #   ports:
  #     - "${LSP_PORT_EXTERNAL}:8095"

  mediator:
    build:
      context: ../src/services/backend/mediator_jupyter_hub_llm_microservice
      dockerfile: Dockerfile
    container_name: "${COMPOSE_PROJECT_NAME}-mediator"
    ports:
      - "${MEDIATOR_PORT_EXTERNAL}:8001"
    environment:
      - PYTHONUNBUFFERED=1
      - FEEDBACK_SERVICE_URL=http://${HOST_IP}:${FEEDBACK_PORT_EXTERNAL}
    volumes:
      - ../src/services/backend/mediator_jupyter_hub_llm_microservice:/app:rw

  feedback-service:
    build:
      context: ../src/services/ml
      dockerfile: semantic_feedback/Dockerfile
    container_name: "${COMPOSE_PROJECT_NAME}-feedback"
    ports:
      - "${FEEDBACK_PORT_EXTERNAL}:9352"
    environment:
      - PYTHONUNBUFFERED=1
      - LLM_BASE_URL=${LLM_BASE_URL}
      - LLM_API_KEY=${LLM_API_KEY}
      - LLM_MODEL=${LLM_MODEL}
      - FEEDBACK_SERVICE_HOST=${FEEDBACK_SERVICE_HOST}
      - FEEDBACK_SERVICE_PORT=${FEEDBACK_SERVICE_PORT}
      - FEEDBACK_SERVICE_N_WORKERS=${FEEDBACK_SERVICE_N_WORKERS}
    volumes:
      - ../src/services/ml/semantic_feedback:/app/semantic_feedback:rw

  adviser-service:
    build:
      context: ../src/services/ml
      dockerfile: adviser/Dockerfile
    container_name: "${COMPOSE_PROJECT_NAME}-adviser"
    ports:
      - "${ADVISER_PORT_EXTERNAL}:9353"
    environment:
      - PYTHONUNBUFFERED=1
      - REDIS_URL=redis://${HOST_IP}:${REDIS_PORT_EXTERNAL}/0
      - POSTGRES_DSN=postgresql://app:app@${HOST_IP}:${POSTGRES_PORT_EXTERNAL}/chatdb
      - LLM_BASE_URL=${LLM_BASE_URL}
      - LLM_API_KEY=${LLM_API_KEY}
      - LLM_MODEL=${LLM_MODEL}
      - TOKENIZER_MODEL=${TOKENIZER_MODEL}
      - CHAT_SERVICE_HOST=${CHAT_SERVICE_HOST}
      - CHAT_SERVICE_PORT=${CHAT_SERVICE_PORT}
      - CHAT_SERVICE_N_WORKERS=${CHAT_SERVICE_N_WORKERS}
    volumes:
      - ../src/services/ml/adviser:/app/adviser:ro
    hostname: adviser
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy

  postgres:
    image: postgres:15
    container_name: "${COMPOSE_PROJECT_NAME}-postgres"
    ports:
      - "${POSTGRES_PORT_EXTERNAL}:5432"
    environment:
      POSTGRES_USER: app
      POSTGRES_PASSWORD: app
      POSTGRES_DB: chatdb
    volumes:
      - ../resources/data/postgres:/var/lib/postgresql/data:rw
      - ../resources/config/postgres/init_scripts:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "app", "-d", "chatdb"]
      interval: 10s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: "${COMPOSE_PROJECT_NAME}-redis"
    ports:
      - "${REDIS_PORT_EXTERNAL}:6379"
    volumes:
      - ../resources/data/redis:/data:rw
    command: ["redis-server", "--save", "60", "1", "--loglevel", "warning", "--maxmemory", "512mb", "--maxmemory-policy", "allkeys-lru"]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      retries: 5

volumes:
  dev_postgres_data:
  dev_redis_data:

