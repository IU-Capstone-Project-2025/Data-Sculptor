version: '3.8'

services:
  jupyterhub:
    build:
      context: ..
      dockerfile: src/services/backend/jupyter_hub/Dockerfile
      args:
        - FEEDBACK_SERVICE_URL=http://${HOST_IP}:${FEEDBACK_PORT_EXTERNAL}
    container_name: "${COMPOSE_PROJECT_NAME}-jupyterhub"
    ports:
      - "${JUPYTERHUB_PORT_EXTERNAL}:${JUPYTERHUB_PORT_INTERNAL}"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock # This is used to create User containers
      - ../resources/config/jupyterhub/jupyter_ai_confi.py:/etc/jupyter/jupyter_server_config.d/jupyter_ai_config.py:ro
      - ../resources/config/jupyterhub:/srv/jupyterhub:rw
      - ../src/services/backend/jupyter_hub_adapter_microservice/sendCode.py:/home/developer/sendCode.py:rw
      - ../src/services/backend/lsp_server/lsp.py:/home/developer/lsp.py:rw
      - ../src/services/backend/jupyter_hub/jupyter-lsp-jupyter-server.json:/etc/jupyter/jupyter_server_config.d/jupyter-lsp-jupyter-server.json:rw
      - ../resources/data/jupyterhub:/home/developer:rw
    env_file:
      - ../resources/config/jupyterhub/.env
    environment:
      - DOCKER_HOST=unix:///var/run/docker.sock
      - JUPYTERHUB_USR_CONTAINERS_HOME=${JUPYTERHUB_USR_CONTAINERS_HOME}
      - CLIENT_ID=${KEYCLOAK_AUTH_CLIENT_ID}
      - CLIENT_SECRET=${KEYCLOAK_AUTH_CLIENT_SECRET}
      - JUPYTERHUB_PORT_INTERNAL=${JUPYTERHUB_PORT_INTERNAL}
      - JUPYTERHUB_DOMAIN_NAME=${JUPYTERHUB_DOMAIN}
      - ADVISER_API_URL=http://${HOST_IP}:{ADVISER_PORT_EXTERNAL}/api/v1/chat
      # - LLM_VALIDATOR_URL=http://${HOST_IP}:${MEDIATOR_PORT_EXTERNAL} # Медиатор не используется
      - URL_STATIC_ANALYZER=http://${HOST_IP}:${ANALYZER_PORT_EXTERNAL}
      - URL_LSP_SERVER=http://${HOST_IP}:${LSP_PORT_EXTERNAL}
    command: >
      bash -c "chown -R developer:developer /home/developer && exec jupyterhub"
    depends_on:
      - keycloak
    entrypoint: ["sh", "-c", "until nc -z keycloak.site 53010; do sleep 1; done && jupyterhub"]
    networks:
      jupyter-network:
        aliases:
          - jupyterhub.site

  # Assigns users to their containers based on usernamev
  nginx:
    image: nginx:alpine
    container_name: jupyter-proxy
    ports:
      - "80:80"
    volumes:
      - ../resources/config/nginx/default.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - jupyterhub
    networks:
      - jupyter-network

  deep-syntatic-service:
    build:
      context: ../src/services/backend/syntactic_analyzis_microservice
      dockerfile: Dockerfile
    container_name: "${COMPOSE_PROJECT_NAME}-deep-static-analyzer-service"
    ports:
      - "${ANALYZER_PORT_EXTERNAL}:8085"
    environment:
      - SEMANTIC_FEEDBACK_LOCALISE_URL=http://${HOST_IP}:${FEEDBACK_PORT_EXTERNAL}/api/v1/localize_mlscent

  real-time-analysis-service:
    build:
      context: ../src/services/backend/real_time_analysis_microservice
      dockerfile: Dockerfile
    container_name: "${COMPOSE_PROJECT_NAME}-real-time-static-analysis"
    ports:
      - "${LSP_PORT_EXTERNAL}:8095"

  # mediator:
  #   build:
  #     context: ../src/services/backend/mediator_jupyter_hub_llm_microservice
  #     dockerfile: Dockerfile
  #   container_name: "${COMPOSE_PROJECT_NAME}-mediator"
  #   ports:
  #     - "${MEDIATOR_PORT_EXTERNAL}:8001"
  #   environment:
  #     - PYTHONUNBUFFERED=1
  #     - FEEDBACK_SERVICE_URL=http://${HOST_IP}:${FEEDBACK_PORT_EXTERNAL}
  #   volumes:
  #     - ../src/services/backend/mediator_jupyter_hub_llm_microservice:/app:rw

  feedback-service:
    build:
      context: ../src/services/ml
      dockerfile: semantic_feedback/Dockerfile
    container_name: "${COMPOSE_PROJECT_NAME}-feedback"
    ports:
      - "${FEEDBACK_PORT_EXTERNAL}:9352"
    environment:
      - PYTHONUNBUFFERED=1
      - LLM_BASE_URL=${LLM_BASE_URL}
      - LLM_API_KEY=${LLM_API_KEY}
      - LLM_MODEL=${LLM_MODEL}
      - FEEDBACK_SERVICE_HOST=${FEEDBACK_SERVICE_HOST}
      - FEEDBACK_SERVICE_PORT=${FEEDBACK_SERVICE_PORT}
      - FEEDBACK_SERVICE_N_WORKERS=${FEEDBACK_SERVICE_N_WORKERS}
      - PROFILE_POSTGRES_DSN=postgresql://app:app@${HOST_IP}:${POSTGRES_PORT_EXTERNAL}/datasculptor
    volumes:
      - ../src/services/ml/semantic_feedback:/app/semantic_feedback:rw

  adviser-service:
    build:
      context: ../src/services/ml
      dockerfile: adviser/Dockerfile
    container_name: "${COMPOSE_PROJECT_NAME}-adviser"
    ports:
      - "${ADVISER_PORT_EXTERNAL}:9353"
    environment:
      - PYTHONUNBUFFERED=1
      - ADVISER_REDIS_URL=redis://${HOST_IP}:${REDIS_PORT_EXTERNAL}/0
      - ADVISER_POSTGRES_DSN=postgresql://app:app@${HOST_IP}:${POSTGRES_PORT_EXTERNAL}/datasculptor
      - LLM_BASE_URL=${LLM_BASE_URL}
      - LLM_API_KEY=${LLM_API_KEY}
      - LLM_MODEL=${LLM_MODEL}
      - TOKENIZER_MODEL=${TOKENIZER_MODEL}
      - CHAT_SERVICE_HOST=${CHAT_SERVICE_HOST}
      - CHAT_SERVICE_PORT=${CHAT_SERVICE_PORT}
      - CHAT_SERVICE_N_WORKERS=${CHAT_SERVICE_N_WORKERS}
    volumes:
      - ../src/services/ml/adviser:/app/adviser:ro
    hostname: adviser
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy

  profile-uploader-service:
    build:
      context: ../src/services/backend/profile_uploader
      dockerfile: Dockerfile
    container_name: "${COMPOSE_PROJECT_NAME}-profile-uploader"
    ports:
      - "${PROFILE_UPLOAD_PORT_EXTERNAL}:${PROFILE_UPLOAD_SERVICE_PORT}"
    environment:
      - PYTHONUNBUFFERED=1
      - PROFILE_POSTGRES_DSN=postgresql://app:app@${HOST_IP}:${POSTGRES_PORT_EXTERNAL}/datasculptor
      - PROFILE_UPLOAD_SERVICE_HOST=${PROFILE_UPLOAD_SERVICE_HOST}
      - PROFILE_UPLOAD_SERVICE_PORT=${PROFILE_UPLOAD_SERVICE_PORT}
      - PROFILE_UPLOAD_SERVICE_N_WORKERS=${PROFILE_UPLOAD_SERVICE_N_WORKERS}
      - MINIO_ENDPOINT=${HOST_IP}:${MINIO_PORT_EXTERNAL}
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
      - MINIO_BUCKET_NAME=cases
    volumes:
      - ../src/services/backend/profile_uploader:/app/profile_uploader:ro
      - /var/run/docker.sock:/var/run/docker.sock:rw
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy

  postgres:
    image: postgres:15
    container_name: "${COMPOSE_PROJECT_NAME}-postgres"
    ports:
      - "${POSTGRES_PORT_EXTERNAL}:5432"
    environment:
      POSTGRES_USER: app
      POSTGRES_PASSWORD: app
      POSTGRES_DB: datasculptor
    volumes:
      - ../resources/data/postgres:/var/lib/postgresql/data:rw
      - ../resources/config/postgres/init_scripts:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U app -d datasculptor"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: "${COMPOSE_PROJECT_NAME}-redis"
    ports:
      - "${REDIS_PORT_EXTERNAL}:6379"
    volumes:
      - ../resources/data/redis:/data:rw
    command: ["redis-server", "--save", "60", "1", "--loglevel", "warning", "--maxmemory", "512mb", "--maxmemory-policy", "allkeys-lru"]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      retries: 5
  
  keycloak:
    build:
      context: ../src/services/backend/keycloak
      dockerfile: Dockerfile
    container_name: "${COMPOSE_PROJECT_NAME}_keycloak"
    ports: 
      - "53010:53010"
      - "${KEYCLOAK_HTTPS_PORT}:8443"
    volumes:
      - keycloak_db_data:/var/lib/postgresql/data:rw
      - keycloak_data:/opt/keycloak/data:rw
    environment:
      KEYCLOAK_DB_NAME:     "${KEYCLOAK_DB_NAME}"
      KEYCLOAK_DB_USER:     "${KEYCLOAK_DB_USER}"
      KEYCLOAK_DB_PASSWORD: "${KEYCLOAK_DB_PASSWORD}"
      KEYCLOAK_ADMIN_USER:  "${KEYCLOAK_ADMIN_USER}"
      KEYCLOAK_ADMIN_PASSWORD: "${KEYCLOAK_ADMIN_PASSWORD}"
      KEYCLOAK_DB_PORT: "5432"
      KC_HOSTNAME: "${KC_HOSTNAME}" 
      KC_HTTP_PORT: "53010"
      KC_HOSTNAME_PORT: "53010"
    depends_on:
      - postgres
    restart: unless-stopped
    command: start-dev
    networks:
      jupyter-network:
        aliases:
          - "${KC_HOSTNAME}"
  vault:
    image: hashicorp/vault:1.17
    container_name: "${COMPOSE_PROJECT_NAME}_vault"
    cap_add:
      - IPC_LOCK
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: myroot  # Root token for dev mode
      VAULT_ADDR: "http://${HOST_IP}:${VAULT_HTTP_PORT}"
    ports:
      - "${VAULT_HTTP_PORT}:8200"
    command: server -dev  # temp dev mode
    volumes:
      - vault-data:/vault/file
    healthcheck:
      test: ["CMD", "vault", "status"]
      interval: 30s
      timeout: 10s
      retries: 5

  minio:
    image: minio/minio:latest
    container_name: "${COMPOSE_PROJECT_NAME}-minio"
    ports:
      - "${MINIO_PORT_EXTERNAL}:9000"
      - "${MINIO_CONSOLE_PORT_EXTERNAL}:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    volumes:
      - ../resources/data/minio:/data:rw
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

volumes:
  dev_postgres_data:
  dev_redis_data:
  keycloak_db_data:
  keycloak_data:
  vault-data:
  dev_minio_data:

networks:
  jupyter-network:
    name: jupyter-network
    driver: bridge
